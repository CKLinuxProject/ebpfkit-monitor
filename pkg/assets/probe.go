// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package assets


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4d\x48\x24\x47\x14\x7e\x35\xce\x3a\xb3\xa3\x71\xdd\x1f\x5d\x23\x1e\x84\x90\x44\x4c\x76\xd4\x51\x83\x04\x02\xb2\x90\xc4\x83\x07\x13\xb2\xc4\x3d\xec\xb6\x6d\x4f\xab\x83\x3f\x33\x99\x6e\xe2\x98\x0d\xc4\x43\x84\xbd\x04\x3c\x24\x30\x07\x09\x66\x43\x12\x0f\x39\x08\x09\xe8\x6d\x3c\x05\x2f\x01\x2f\x01\x21\x09\x78\x08\x44\xc8\x1e\x4c\x58\x58\x43\x16\x3b\x54\xd5\x2b\xbb\x7d\x5d\x9d\x1d\x37\x24\x27\x0b\x76\xbf\x7d\x5f\xbd\x9f\x7a\xef\x55\x55\xd7\xec\x07\xaf\x0e\xbf\x16\x63\x0c\xd4\x60\xf0\x10\x7c\xc9\x1f\xe5\x4b\xfe\xbf\x07\xf1\xef\xab\xc0\xa0\xf2\x9c\xe4\x2a\x57\x25\x2e\x01\x40\x03\x00\xcc\x03\x40\x3b\x00\x58\xa9\x47\x9e\x98\xbf\x27\xe7\x13\x31\x80\x47\x9e\xe7\xb5\x90\x20\x4b\x22\x36\xc0\x0d\x48\x08\x99\xce\xdf\x60\x0d\x62\xbe\xf2\x8e\x94\x37\x62\x00\x9e\xe7\x79\xdc\xee\x65\x00\x38\x07\x29\xc9\xa3\x9d\xd3\x7a\xe8\x29\x3f\xd6\x6c\x96\xab\x40\xfb\xb3\xd9\xd4\x9d\xd6\x03\xb9\x9e\xcf\x70\x3d\x0c\xe0\xc0\xf3\x3c\xee\xef\x3c\xe7\x2d\x7f\x3d\xb5\xdc\x1f\xc6\xff\x04\xb1\xd2\x2c\x71\x61\xb2\x20\xb0\x29\x71\x4d\xf2\x0e\xfa\xab\x01\xe8\x20\xfe\xef\xa3\xff\x38\xfa\x8d\x13\xfd\x51\xa2\xbf\x87\xfa\xc9\x80\x7e\x22\x01\x30\x46\xf4\x7e\x0a\xf8\x55\xfe\x94\xbe\xf9\xd5\x7d\xef\x7f\xe9\x87\xf9\x1f\xf7\xc3\xf9\xf7\xfd\x28\x9c\xb2\x1f\x53\x67\xfd\x78\xf2\x7e\x5c\x96\x68\xf6\x24\x8f\xd7\xc1\xc7\x74\xa7\xcc\xd3\xea\x94\x71\xef\x74\x1e\x20\xee\x23\xee\x21\xee\x22\xee\x20\x6e\x23\x6e\x21\x6e\x22\xae\x23\xae\x21\xae\x22\x96\x11\x97\x11\xef\x22\x2e\x22\x96\x10\x0b\x88\x53\x88\x63\x88\xa3\x88\x23\x88\x43\x88\x83\x88\x03\x88\xdd\x88\x1d\x88\xed\x88\x2d\x88\x8d\x88\x49\x44\x40\x3c\x3c\xc2\xfc\x11\xf7\x11\xf7\x10\x77\x11\x77\x10\xb7\x11\xb7\x10\x37\x11\xd7\x11\xd7\x10\x57\x05\xbe\xcd\x78\xdf\x01\x2e\x60\x1f\x2a\x5f\x62\x1f\x6b\x01\x56\x8f\x3c\x2f\xb8\x3f\x6e\x33\xd9\xc7\x6b\x9a\xfd\x54\x19\x3f\xb9\xef\x9a\xe0\xca\xb1\x9c\x10\xfb\x76\xe5\x88\xfa\x5f\x39\x0a\xef\x5b\xe5\x47\xdd\xab\x1b\x71\xdf\x6f\x4c\x7b\x1e\xca\xd2\x6f\xe0\x3c\x94\x75\x7e\x23\xfc\x45\xdd\x0f\x2a\xce\x69\xcf\x5b\x13\xd4\x0b\xd9\x34\x5f\x14\x68\xe1\xb9\x31\x51\xdf\x6a\x7d\x10\xf2\x77\xe8\x79\x5e\xe5\x73\x94\x6b\x00\x1e\x68\xfc\x3f\x6e\xdd\x6a\xbd\x15\xb4\x9b\x67\x58\x9f\x56\xb9\xfe\x49\xac\x97\xaa\xdb\x2d\xf6\x14\x9c\x2e\x2f\x79\x8f\xf8\x79\x1c\x6a\xf3\xd0\xd9\xd7\x68\xd6\xcb\xd5\xf8\x7e\x12\x69\xc5\xe1\x6c\x04\x06\xc3\x92\x9c\xd5\x26\x3c\xce\x6a\x13\x3d\xf8\x77\x99\x7f\x93\xe1\xf5\x91\x61\x2e\x1f\x79\x9e\xd7\x88\x73\xec\xbd\x37\x21\xf9\x7e\x1d\xe3\xb7\x53\x0b\xfe\x51\x63\x39\x70\x66\xdb\x00\xa0\x2f\x30\x77\x40\x62\xf0\xf9\xb7\x22\x6c\xd5\xbc\x1b\x9c\x8f\x85\xe7\x3f\x0e\xc8\x9b\x1a\xff\xdf\x06\xe4\xf5\xc8\x6c\x4f\x8e\xef\xc4\x5d\xf2\xbb\x47\xf9\x3f\xc5\xfa\xe2\xd0\x4d\xd6\xf9\x0b\xf2\x8b\x84\x4f\x88\xf5\xc6\x60\x99\xf8\xf9\x83\x49\x7e\x8f\xf0\xbf\x09\xbe\x36\xe4\xff\x67\xe4\xa9\xff\x26\xe1\x3f\x09\x8b\xa4\x2e\x0d\x42\x4e\xc1\x1a\x4d\x40\xf0\xf5\xb0\x1a\xca\x98\xdf\xab\x31\x0d\xcb\x79\xfd\xc1\xa8\x11\x2f\x30\x1d\x9f\x8c\xe0\x53\x11\x7c\x7d\x88\x1b\x61\x00\x17\xc1\xff\xd1\xa7\x56\xf0\x21\x70\xfe\x72\x88\xbf\x2d\xf8\x86\x63\xbe\x0d\xeb\xe4\x0a\xfe\x42\x88\x7f\x85\x01\x5c\x0a\xe4\xa5\xf6\x5d\xa3\xe0\x6b\x43\xfc\xaf\xc0\x79\xbf\x3e\x6a\x1f\xff\xc8\x6d\x34\x39\xcd\x88\xf5\x37\x86\xe2\x96\x84\x7f\xbf\x3e\x6a\x3f\xd7\x09\xff\x7e\x1d\xd4\x3e\xfd\x48\xf0\x7e\xdd\xd4\xfe\x1e\x40\xe4\x6e\x9f\x06\xf9\x1b\x4e\xc9\xfc\x2c\xee\x92\xf9\xc3\x53\xce\x6f\x32\x5f\x16\xd5\x8e\xf9\x32\x7f\x89\x8d\xc6\x4e\xda\x77\x10\x7f\x77\x89\x3c\xf4\x0f\xf3\x57\xf0\x9c\x2a\xb9\x9e\xe4\x57\x47\xf2\xe3\x2f\x8d\x52\x40\xe6\x5d\x2f\x07\xe4\x0b\x81\x3a\x31\xd5\x9f\x74\xd1\x9e\x49\xbb\x76\xc9\x05\xb7\x68\x5a\x76\x21\x9f\x9b\x73\x0d\xc3\xb1\xa6\xec\xac\x82\x42\x31\x6f\xd9\x8e\x63\xd8\xa5\x9c\x2b\xf4\x7d\xcd\x2e\xa1\xd1\xa5\xd1\x9b\x35\x0b\x4e\x97\x39\x33\x93\x9f\xb7\xb3\xc6\x78\x6e\xce\x2c\xe6\x6c\xe7\x24\x6b\xe5\xf3\xd3\x9c\x34\xde\xb5\x8b\x4e\x2e\x3f\xf7\xf8\x15\x4c\xe4\x8b\xd3\xd5\xac\x40\xe8\x15\x8a\x79\xd7\xb6\x5c\x63\xbc\x30\x01\xd3\x85\x62\x7e\xdc\x36\x0c\x67\xc1\x11\x32\xf7\x21\xb9\x2e\xc3\x28\xbd\xd4\x77\x3c\xa1\x14\x03\xd4\x09\xdd\x9c\xd9\x9b\x09\x29\x07\x28\x63\x26\x67\xd9\x73\x8e\x2d\xeb\x6a\x4f\x19\x13\x45\x73\xd6\x96\x79\xbb\x93\x39\x95\x74\x35\xc5\xb6\xad\xea\x8a\x6d\x5b\x30\x6b\xe6\xe6\xd2\x16\xa4\x1d\xb7\xe8\x9a\xe3\x90\x76\x16\x66\x39\x0e\x5f\xbf\x9e\x31\xfa\x39\x74\x4b\xc8\x18\x7d\x1c\x7a\x24\x74\x4b\xe8\x37\x7a\x25\x29\xa0\xcf\xc8\x70\xe8\x35\x32\x90\x2e\xe6\xb3\xa6\x6b\x72\xaf\x3d\xe9\x9e\xf0\x59\x7e\x92\xf1\x3d\x93\xef\x54\x3a\xa6\xf0\x4a\x78\x81\x5c\xb5\xf4\xff\xbc\xce\x21\x47\x6f\xd8\x41\x44\xfa\x1d\xa5\x37\x2e\xb7\x3d\xaf\x89\x3f\x80\x57\x61\x3b\xca\xcd\x78\xb4\x95\xbd\xba\xb1\x9e\x67\xfa\xf8\xea\xbb\x44\xbf\xd3\x34\xfe\x33\x4c\x1f\x7f\x54\x13\x3f\xae\x89\xff\x57\x44\xfe\x5b\xb1\xea\xe2\x3f\x8c\xc8\xbf\xa4\x89\x5f\xab\x89\x7f\x2f\x22\xff\x11\xfc\x64\xd0\x77\x08\x8d\xff\x69\x44\xfe\x65\x8c\xdf\x1d\x88\x9f\xd4\xc4\xdf\x88\xc8\x7f\x0f\x09\xfa\xce\xa1\xf1\xbf\x89\xc8\x7f\x5b\x93\x7f\x4a\x13\xbf\x3f\x22\x7e\x59\xfe\x6c\x0b\xbd\xa3\x68\xfc\x9e\x88\xf8\xfb\x9a\xf8\xf5\x9a\xf8\x37\x31\x3e\x3d\x43\x43\xa8\xd8\x46\xfa\x4f\x5f\x28\xf9\x08\xfb\xec\xf9\xea\xec\x27\x99\xde\x7e\x31\x55\x9d\x7d\x5b\x4c\xda\x67\x08\xbf\x52\x27\x91\xd6\x86\x11\x7c\x23\x22\xfe\x17\x75\xfa\x78\xf4\xfe\x58\x8a\xc8\xff\xeb\x08\x7b\x2a\xdf\xc2\xf8\xf4\x45\xb8\x8e\xf6\x3b\x84\xa7\xfd\xbf\x19\xb1\xff\x93\xd8\xe0\x31\x94\x9b\xf1\xfb\x4f\xfb\xff\x03\x0b\xc7\xe6\x63\x11\x9f\x48\x9b\x81\xf7\xc7\xc5\x80\xbd\xfa\x1d\xf2\x77\x00\x00\x00\xff\xff\x05\x0b\x39\x5a\x58\x18\x00\x00")

func bindataProbeOBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeO,
		"/probe.o",
	)
}



func bindataProbeO() (*asset, error) {
	bytes, err := bindataProbeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 6232,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1627922317, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeO, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
